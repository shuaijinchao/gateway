# 设置NginxWoker运行用户及运行组
# user nginx nginx;
# 设置Nginx工作进程数量
worker_processes 2;
# 设置Nginx进程ID存储文件
pid /var/run/api-gateway.pid;

events {
    # 事件驱动模型
    use epoll;
    # 最大连接数
    worker_connections 1024;
}

http {
    # 文件扩展名与文件类型映射表
    include mime.types;
    # 设置默认返回响应内容类型
    default_type application/octet-stream;
    # 设置主日志文件输出格式
    log_format main '$remote_addr\t$http_x_forwarded_for\t$time_iso8601\t$scheme://$http_host\t$request\t$request_length\t'
    '$http_referer\t$http_user_agent\t$connection_requests\t$upstream_cache_status\t$status\t'
    '$request_time\t$upstream_response_time\t$bytes_sent\t$body_bytes_sent\t$server_name\t'
    '$upstream_addr\t$upstream_status\t$request_id\t';
    # 设置API项目日志文件输出格式
    log_format api '$remote_addr\t$http_x_forwarded_for\t$time_iso8601\t$scheme://$http_host\t$request\t$request_length\t'
    '$http_referer\t$http_user_agent\t$connection_requests\t$upstream_cache_status\t$status\t'
    '$request_time\t$upstream_response_time\t$bytes_sent\t$body_bytes_sent\t$server_name\t$project\t$route_path\t$hostname\t'
    '$upstream_addr\t$upstream_status\t$upstream_request\t$request_id\t$app_version\t$api_version\t$network\t$device\t$platform\t';
    # 定义访问日志输出
    access_log /var/log/openresty/access.log main;
    # 定义错误日志输出
    error_log /var/log/openresty/error.log;
    # 开启系统调用
    # off 硬盘 >> kernel buffer >> user buffer>> kernel socket buffer >> 协议栈
    # on 硬盘 >> kernel buffer (快速拷贝到kernelsocket buffer) >> 协议栈
    sendfile on;
    # 请求处理完成后保持TCP连接时间
    keepalive_timeout 65s;
    # 指定Nginx与后端fastcgi server连接超时时间
    fastcgi_connect_timeout 25s;
    # 指定Nginx向后端传送请求超时时间
    fastcgi_send_timeout 25s;
    # 指定Nginx接收后端fastcgi响应请求超时时间
    fastcgi_read_timeout 25s;
    # 指定Nginx读取fastcgi响应第一部分需要用多大的缓冲区
    fastcgi_buffer_size 256k;
    # 指定Nginx需要用多大的缓冲区缓冲fastcgi的应答请求
    fastcgi_buffers 4 512k;
    # 整个数据请求需要多大的缓存区
    fastcgi_busy_buffers_size 1024k;
    # 写入缓存文件使用多大的数据块
    fastcgi_temp_file_write_size 1024k;
    # 设置请求最大请求体大小,超出返回413
    client_max_body_size 8M;
    # 设置用于请求主体的缓冲区大小，如果主体超过缓冲区大小，则完整主体或其一部分将写入临时文件
    client_body_buffer_size 1M;
    # 开启Gzip压缩
    gzip on;
    # 设置允许压缩的页面最小字节数
    gzip_min_length 1k;
    # 设置gzip申请内存的大小，其作用是按块大小的倍数申请内存空间
    gzip_buffers 8 16k;
    # 用于识别HTTP协议的版本
    gzip_http_version 1.1;
    # 设置gzip压缩等级,等级越底压缩速度越快文件压缩比越小，反之速度越慢文件压缩比越大
    gzip_comp_level 3;
    # 设置需要压缩的MIME类型
    gzip_types text/plain application/x-javascript application/javascript text/css application/xml;
    # 和http头有关系，加个vary头，给代理服务器用的，有的浏览器支持压缩，有的不支持，所以避免浪费不支持的也压缩
    gzip_vary on;
    # 共享内存（项目秘钥缓存）
    lua_shared_dict sgin-auth 2m;
    # 共享内存（请求速度限制缓存）
    lua_shared_dict limit_req_store 100m;
    # 共享内存（请求连接数限制缓存）
    lua_shared_dict limit_conn_store 100m;
    # 共享内存（数据缓存）
    lua_shared_dict api_data 20m;
    # 共享内存（路由缓存）
    lua_shared_dict routes 20m;
    # 共享内存（项目缓存）
    lua_shared_dict projects 1m;
    # 共享内存（黑白名单缓存）
    lua_shared_dict waf 2m;
    # 共享内存（黑白名单缓存）
    lua_shared_dict jwt-auth 2m;
    # lua模块搜索路径（c模块）
    lua_package_cpath "/usr/local/lib/lua/5.1/?.so;;";
    # lua模块搜索路径（lua模块）
    lua_package_path "/srv/app/api-gateway/?.lua;;";
    # lua代码缓存（生产环境关闭）
    lua_code_cache off;
    # 定义上游服务
    upstream api.com {
        # 服务节点
        server 127.0.0.1:80;
        # 应用层负载均衡
        balancer_by_lua_block {
            application.balancer()
        }
        # 指定Nginx每个worker连接后端的最大长连接数
        keepalive 1000;
    }
    # 设置代理缓存地址、目录文件缓存策略、分配内存大小
    proxy_cache_path /tmp/cache/nginx levels=1:2 keys_zone=api_cache:20m inactive=10h max_size=500m;
    # 初始化Lua框架配置加载相关插件
    init_by_lua_block {
        application = require "main"
        application.init()
    }
    # 初始化并调用全部插件Worker阶段工作
    init_worker_by_lua_block {
        application.init_worker()
    }

    server {
        listen       80;
        server_name  localhost;

        location / {
            root   html;
            index  index.html index.htm;
            return 500;
        }

        # redirect server error pages to the static page /50x.html
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }
    }
    # 加载子配置文件
    include conf.d/*.conf;
}
