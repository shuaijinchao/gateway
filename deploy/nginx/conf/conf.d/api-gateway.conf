server {
    # 监听端口配置
    listen 80;
    # 开启SSL访问
    # listen 443 ssl;
    # 引入SSL配置
    # include ssl_params;
    # 绑定域名
    server_name api.gateway.com;
    # 设置访问日志路径
    access_log /var/log/openresty/api-gateway.access.log api;
    # 设置错误日志路径
    error_log /var/log/openresty/api-gateway.error.log;
    # 设置默认返回响应内容类型
    default_type application/json;
    # 设置默认后端服务器地址
    set $upstream_host $host;
    # 设置默认请求URI
    set $route_path $uri;
    # 设置默认项目前缀
    set $project 'api';
    # 设置默认移动端应用版本
    set $app_version '';
    # 设置内外网默认变量
    set $network '';
    # 设置默认请求的api版本
    set $api_version 'v1';
    # 设置默认用户设备型号存储变量
    set $device '';
    # 设置默认的请求平台
    set $platform 'web';
    # 用于判断是否缓存该接口响应（默认为1所有接口都不缓存）
    set $no_cache 1;
    # 用于判断客户端请求是否直接穿透到后端（默认为1所有请求都穿都到后端）改配置暂未启用
    set $is_pass_cache 1;
    # 设置默认HttpCode为200的才会缓存
    set $cache_code 200;
    # 设置默认后端请求地址
    set $upstream_request $request;

    location / {
        # 增加响应Header（请求ID）
        add_header X-Request-Id $request_id;
        # Rewrite阶段，执行转发、重定向、缓存等功能
        rewrite_by_lua_block {
            application.rewrite()
        }
        # Access阶段，执行IP准入、接口权限等功能
        access_by_lua_block {
            application.access()
        }
        # HeaderFilter阶段，响应头部过滤处理
        header_filter_by_lua_block {
            application.header_filter()
        }
        # BodyFilter阶段，响应体过滤处理
        body_filter_by_lua_block {
            application.body_filter()
        }
        # Log阶段，会话完成后本地异步完成日志记录
        log_by_lua_block {
            application.log()
        }
        # 设置隐藏Header头信息
        proxy_hide_header Set-Cookie;
        # 设置不缓存的Header头信息
        proxy_ignore_headers Expires Cache-Control Set-Cookie;
        # 使用哪个代理缓存的Key
        proxy_cache api_cache;
        # 设置代理缓存的请求方法
        proxy_cache_methods GET;
        # 设置代理缓存Key由哪些参数组成
        proxy_cache_key $request_uri$http_authorization;
        # 设置不同响应码的缓存时间
        proxy_cache_valid 10m;
        # 出现配置中出现的错误直接托底旧数据
        proxy_cache_use_stale error timeout updating http_500 http_502 http_503 http_504;
        # 缓存并发锁，当Nginx缓存没有命中的时候只有一个请求回源业务后端请求数据
        proxy_cache_lock on;
        # 设置不缓存，值只有两种0或非0，非0则不缓存
        proxy_no_cache $no_cache;
        # 增加响应Header（缓存状态）
        add_header X-Cache-PASS $upstream_cache_status;
        # 设置代理转发地址
        proxy_pass http://api.com;
        # 重新设置发往后端的请求头（Host地址）
        proxy_set_header Host $upstream_host;
        # 重新设置发往后端的请求头（真实IP地址）
        proxy_set_header X-Real-IP $remote_addr;
        # 重新设置发往后端的请求头（代理IP地址）
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        # 配置当上游返回的是转发请求时请求的代理服务器
        proxy_redirect off;
        # 服务容灾，当出现配置中的异常响应时Nginx会请求另一台上游服务器
        proxy_next_upstream error timeout http_404 http_500 http_504 http_502;
        # 请求传递到下一个服务器的可能尝试次数
        proxy_next_upstream_tries 5;
        # 重新设置发往后端的请求头（请求ID）
        proxy_set_header X-Request-Id $request_id;
    }

    location /api/ {
        # 动态更新获取共享缓存配置
        content_by_lua_file /srv/app/api-gateway/api/main.lua;
    }

    location = /favicon.ico {
        log_not_found off;
        access_log off;
        error_log off;
    }

    location /robots.txt {
        return 200 'User-agent: *\nDisallow: /';
    }
}
